{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["FilterByStatusTypes","API_URL","getTodos","a","fetch","response","json","getUser","userId","TodoList","state","todos","searchQuery","filterByStatus","hasLoadingError","handleSearch","target","setState","value","handleSelect","getFilteredTodos","queryLow","toLowerCase","filter","todo","active","completed","all","title","includes","this","props","selectedUserId","selectUser","filteredTodos","className","type","placeholder","onChange","htmlFor","id","length","map","cn","checked","readOnly","onClick","React","Component","CurrentUser","user","loadUser","prevProps","name","email","phone","clear","App","clearUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45ae38fc.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { getTodos } from '../../api';\n\nimport './TodoList.scss';\n\nenum FilterByStatusTypes {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\ninterface State {\n  todos: Todo[];\n  searchQuery: string;\n  filterByStatus: FilterByStatusTypes;\n  hasLoadingError: boolean;\n}\n\ninterface Props {\n  selectedUserId: number;\n  selectUser: (userId: number) => void;\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    searchQuery: '',\n    filterByStatus: 'all' as FilterByStatusTypes,\n    hasLoadingError: false,\n  };\n\n  async componentDidMount() {\n    try {\n      const todos = await getTodos();\n\n      this.setState({ todos });\n    } catch {\n      this.setState({ hasLoadingError: true });\n    }\n  }\n\n  handleSearch = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ searchQuery: target.value });\n  };\n\n  handleSelect = ({ target }: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ filterByStatus: target.value as FilterByStatusTypes });\n  };\n\n  getFilteredTodos = () => {\n    const { searchQuery, todos, filterByStatus } = this.state;\n    const queryLow = searchQuery.toLowerCase();\n\n    const filteredTodos = todos.filter(todo => {\n      switch (filterByStatus) {\n        case FilterByStatusTypes.active:\n          return !todo.completed;\n\n        case FilterByStatusTypes.completed:\n          return todo.completed;\n\n        case FilterByStatusTypes.all:\n        default:\n          return todo;\n      }\n    });\n\n    return filteredTodos.filter(todo => (\n      todo.title\n      && todo.title.toLowerCase().includes(queryLow)\n    ));\n  };\n\n  render() {\n    const {\n      searchQuery,\n      filterByStatus,\n      hasLoadingError,\n    } = this.state;\n    const { selectedUserId, selectUser } = this.props;\n    const filteredTodos = this.getFilteredTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__controls\">\n          <input\n            value={searchQuery}\n            type=\"text\"\n            placeholder=\"Search by title\"\n            onChange={this.handleSearch}\n          />\n\n          <label htmlFor=\"status-type\">\n            Status:\n            <select\n              onChange={this.handleSelect}\n              value={filterByStatus}\n              id=\"status-type\"\n            >\n              <option value=\"all\">\n                All\n              </option>\n              <option value=\"active\">\n                Active\n              </option>\n              <option value=\"completed\">\n                Completed\n              </option>\n            </select>\n          </label>\n        </div>\n        <div>\n          {filteredTodos.length > 0\n            ? (\n              <ul className=\"TodoList__list\">\n                {filteredTodos.map(todo => (\n                  <li\n                    key={todo.id}\n                    className={\n                      cn('TodoList__item', {\n                        'TodoList__item--checked': todo.completed,\n                        'TodoList__item--unchecked': !todo.completed,\n                      })\n                    }\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={todo.completed}\n                        readOnly\n                      />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      type=\"button\"\n                      className={\n                        cn('button TodoList__user-button', {\n                          'TodoList__user-button--selected': todo.userId === selectedUserId,\n                        })\n                      }\n                      onClick={() => selectUser(todo.userId)}\n                    >\n                      {`User #${todo.userId}`}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            )\n            : <h2>Loading...</h2>}\n          {hasLoadingError\n            && <h2>Server is not responding</h2>}\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async () => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number) => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport { getUser } from '../../api';\n\nimport './CurrentUser.scss';\n\ninterface Props {\n  selectedUserId: number;\n  clear: () => void;\n}\n\ninterface State {\n  user: User | null;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser = async () => {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({ user });\n  };\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      user && (\n        <>\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"button CurrentUser__clear\"\n            onClick={this.props.clear}\n          >\n            Clear\n          </button>\n        </>\n      )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={selectedUserId}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clear={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}